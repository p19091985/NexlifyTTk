import tkinter as tk
from tkinter import ttk
import webbrowser

class AboutDialog(tk.Toplevel):
    """
    Exibe informa√ß√µes detalhadas sobre a arquitetura e prop√≥sito do sistema.
    """
    def __init__(self, parent):
        super().__init__(parent)
        self.title("Sobre o Sistema (v1.0.0)")

        self.transient(parent)
        self.grab_set()

                                    
                                                                   
                                                                     
                                                                     
                                                     
        self.update_idletasks()
                                 

        parent_x = parent.winfo_x()
        parent_y = parent.winfo_y()
        parent_width = parent.winfo_width()
        parent_height = parent.winfo_height()

        self_width = 550
        self_height = 480

        pos_x = parent_x + (parent_width // 2) - (self_width // 2)
        pos_y = parent_y + (parent_height // 2) - (self_height // 2)

        self.geometry(f"{self_width}x{self_height}+{pos_x}+{pos_y}")
        self.resizable(False, False)

        main_frame = ttk.Frame(self, padding=20)
        main_frame.pack(fill="both", expand=True)
        main_frame.columnconfigure(0, weight=1)

        header_frame = ttk.Frame(main_frame)
        header_frame.pack(pady=(0, 15))

        ttk.Label(header_frame, text="üöÄ", font=("-size", 36)).pack(side="left", padx=(0, 10))
        title_frame = ttk.Frame(header_frame)
        title_frame.pack(side="left")
        ttk.Label(title_frame, text="Sistema de Demonstra√ß√£o Tkinter/ttk", font=("-size", 16, "-weight", "bold")).pack(anchor="w")
        ttk.Label(title_frame, text="Vers√£o 1.0.0 - Arquitetura MVC/Camadas", font=("-size", 9)).pack(anchor="w")

        ttk.Separator(main_frame, orient="horizontal").pack(fill="x", pady=(0, 15))

        notebook = ttk.Notebook(main_frame)
        notebook.pack(fill="both", expand=True, pady=(0, 15))

        purpose_tab = ttk.Frame(notebook, padding=10)
        notebook.add(purpose_tab, text=" Prop√≥sito ")
        ttk.Label(purpose_tab, text=(
            "Esta aplica√ß√£o √© um boilerplate de refer√™ncia, constru√≠do com Tkinter e o estilo ttk.\n"
            "Seu objetivo principal √© demonstrar uma arquitetura de software desacoplada, baseada em "
            "padr√µes como MVC (Model-View-Controller), aplicada a um ambiente desktop Python.\n\n"
            "O foco do projeto √© a clareza da separa√ß√£o de camadas, a manutenibilidade e a extensibilidade "
            "que essa estrutura proporciona."
            ), wraplength=self_width-60, justify="left").pack(anchor="w")

        arch_tab = ttk.Frame(notebook, padding=10)
        notebook.add(arch_tab, text=" Arquitetura ")
        ttk.Label(arch_tab, text=(
            "O sistema √© estruturado em camadas bem definidas:\n\n"
            "‚ñ† UI (Interface): Tkinter/ttk (Views, Dialogs, Modals)\n"
            "   ‚Ü≥ Respons√°vel pela apresenta√ß√£o visual e intera√ß√£o prim√°ria.\n\n"
            "‚ñ† Controle (L√≥gica de Apresenta√ß√£o) (`panels`):\n"
            "   ‚Ü≥ Cada 'Painel' atua como um Controller, gerenciando o estado da UI,\n"
            "      respondendo a eventos e comunicando-se com a camada de persist√™ncia.\n\n"
            "‚ñ† Persist√™ncia (`persistencia`):\n"
            "   ‚Ü≥ Abstrai o acesso aos dados, garantindo independ√™ncia do banco.\n"
            "   ‚Ü≥ `Repository`: CRUD gen√©rico via SQLAlchemy Core.\n"
            "   ‚Ü≥ `DataService`: Transa√ß√µes at√¥micas e l√≥gica de neg√≥cio complexa.\n"
            "   ‚Ü≥ `Database`: Gerencia a conex√£o (l√™ `banco.ini`).\n"
            "   ‚Ü≥ `Auth/Security`: Cuida da autentica√ß√£o (bcrypt) e criptografia (Fernet).\n\n"
            "‚ñ† Configura√ß√£o (`config.py`, `banco.ini`, `settings.json`):\n"
            "   ‚Ü≥ Permite flexibilidade em tempo de execu√ß√£o e deployment."
            ), wraplength=self_width-60, justify="left").pack(anchor="w")

        features_tab = ttk.Frame(notebook, padding=10)
        notebook.add(features_tab, text=" Destaques ")
        ttk.Label(features_tab, text=(
            "Pontos Not√°veis:\n\n"
            "‚ñ∂ **Multi-Banco:** Suporte nativo a SQLite, PostgreSQL, MySQL/MariaDB\n"
            "   e SQL Server, configur√°vel via `banco.ini`.\n"
            "‚ñ∂ **Seguran√ßa:** Senhas de usu√°rio hasheadas (bcrypt) e credenciais\n"
            "   de banco criptografadas (Fernet).\n"
            "‚ñ∂ **Desacoplamento:** Clara separa√ß√£o entre UI, l√≥gica e dados.\n"
* "‚ñ∂ **Configurabilidade:** Flags em `config.py` para modos de opera√ß√£o\n"
            "   (Produ√ß√£o, Dev Backend, Dev Frontend Offline).\n"
            "‚ñ∂ **Estilo Personaliz√°vel:** Configura√ß√£o de fontes e cores via\n"
            "   `settings.json` e di√°logo de tema avan√ßado.\n"
            "‚ñ∂ **Valida√ß√£o:** Verifica√ß√£o autom√°tica de configura√ß√µes l√≥gicas ao iniciar."
            ), wraplength=self_width-60, justify="left").pack(anchor="w")


        ok_button = ttk.Button(main_frame, text="OK", command=self.destroy, style="Success.TButton")
        ok_button.pack(pady=(10, 0))
        ok_button.focus_set()

        self.wait_window(self)